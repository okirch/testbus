#!/bin/bash
#
# Start a KVM instance with DBus forwarding; optionally installing
# some additional RPMs inside.
#
# For instance, you invoke it as
#
# testbus-control-kvm \
#	--add-rpm testbus-agent-kvm-0.1-0.x86_64.rpm \
#	client sle11-image.qcow2
#
# Note that this script always copies the provided image, so changes are
# never retained across restarts.
#

. /usr/share/testbus/control.functions

set -- `getopt -u -l add-rpm:,mac-addr -o R:M: -- "$@"`
while [ $# -gt 0 ]; do
	option=$1; shift
	case $option in
	--add-rpm|-R)
		instance_dir_add_rpms $1
		shift
		;;
	--mac-addr|-M)
		instance_macaddr=$1
		shift
		;;
	--)
		break
		;;
	*)
		echo "Unsupported option $option" >&2
		exit 1
		;;
	esac
done


function testbus_kvm_start {

	instance_init "$@"

	instance_proxy_init "$instance_dir/proxy.socket"

	instance_network_init_defaults
	instance_network_config eth0 "$instance_ipaddr/$instance_ipmask"

	instance_hostname_init_defaults
	instance_hostname_config $instance_hostname $instance_ipaddr $instance_tag

	instance_onboot_finish

	instance_config_report

	instance_config_write /etc/testbus/kvm-guest.xml

	if ! virsh net-list | grep -qs testbus; then
		virsh net-create /etc/testbus/kvm-network.xml
		virsh net-start testbus || fatal "Cannot start testbus host network"
	fi

	instance_proxy_start

	virsh create $instance_config
}

function testbus_kvm_stop {

	instance_init_for_stop "$@"

	virsh destroy $instance_tag
	instance_proxy_stop
}

command=$1; shift
case $command in
start)
	testbus_kvm_start "$@";;
stop)
	testbus_kvm_stop "$@";;
*)
	fatal "$0: unsupported command $command";;
esac
