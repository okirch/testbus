#!/bin/bash
#
# Support functions for testbus self tests
#

#exec 2>client.log

# The following variable(s) are considered tunables that can be overridden from
# the test script after sourcing this file.
TESTBUS_CLAIM_TIMEOUT=60

# By setting TESTBUS_SELFTEST_LOCALFILES=yes, you can tell the testbus self tests
# to use the uninstalled programs and files.
if test -n "$TESTBUS_SELFTEST_LOCALFILES"; then
	if test ! -x ./testbus-client; then
		echo "Cannot run selftest in localfiles mode - no testbus-client in local directory" >&2
		exit 1
	fi
	CLIENT=./testbus-client
	PROXY=./dbus-proxy

	if test -n "$TESTBUS_SELFTEST_DEBUG"; then
		DEBUG="--debug $TESTBUS_SELFTEST_DEBUG"
	fi
	if test -f etc/common.xml; then
		sed 's:<schema name=[^"]*/:<schema name="schema:g' etc/common.xml > etc/local.xml
		CONFIG="--config etc/local.xml"
	fi
else
	CLIENT=testbus-client
	PROXY=dbus-proxy
	CONFIG=
	DEBUG=
fi

# Anything below this line is not user serviceable. Hands off, please.
TESTBUS_GLOBAL_STATUS=SUCCESS
TESTBUS_GROUP_STATUS=SUCCESS

TESTGROUP_NAME=default

function testbus_call {

	$CLIENT $CONFIG $DEBUG "$@"
}

function testbus_trace {

	echo "$@" >&2
}

function __testbus_make_name {

	myname=$1
	basename $myname| tr - _
}

function testbus_init_group {

	TESTGROUP_NAME=`__testbus_make_name $1`; shift

	TESTBUS_GROUP_HANDLE=`testbus_call create-test $TESTGROUP_NAME`
	TESTBUS_GROUP_TEMPDIR=`mktemp -d /tmp/testbusXXXXXX`
	TESTBUS_GROUP_STATUS=SUCCESS
}

function testbus_finish_group {

	# testbus_call show-xml --raw
	
	testbus_finish_test $*
	if [ -n "$TESTBUS_GROUP_TEMPDIR" ]; then
		rm -rf $TESTBUS_GROUP_TEMPDIR
		unset TESTBUS_GROUP_TEMPDIR
	fi

	if [ -n "$TESTBUS_GROUP_HANDLE" ]; then
		testbus_call delete $TESTBUS_GROUP_HANDLE
		unset TESTBUS_GROUP_HANDLE
	fi

	if [ "$TESTBUS_GROUP_STATUS" != "SUCCESS" ]; then
		echo "One or more tests in group $TESTGROUP_NAME failed"
		TESTBUS_GLOBAL_STATUS=FAILED
	fi

	unset TESTGROUP_NAME
}

function testbus_init_test {

	testbus_finish_test

	TESTCASE_NAME=`__testbus_make_name $1`; shift

	if [ -z "$TESTBUS_GROUP_TEMPDIR" ]; then
		TESTBUS_TEMPDIR=`mktemp -d /tmp/testbusXXXXXX`
	else
		TESTBUS_TEMPDIR=$TESTBUS_GROUP_TEMPDIR/$TESTCASE_NAME
		mkdir -p $TESTBUS_TEMPDIR
	fi

	testbus_call show-xml --raw > $TESTBUS_TEMPDIR/xml-tree-before

	if [ -z "$TESTBUS_GROUP_HANDLE" ]; then
		TESTBUS_TEST_HANDLE=`testbus_call create-test $TESTCASE_NAME`
	else
		TESTBUS_TEST_HANDLE=`testbus_call create-test --context $TESTBUS_GROUP_HANDLE $TESTCASE_NAME`
	fi
}

function testbus_finish_test {

	status=${1:-SUCCESS}

	if [ -n "$TESTBUS_TEMPDIR" ]; then
		rm -rf $TESTBUS_TEMPDIR
		unset TESTBUS_TEMPDIR
	fi

	if [ -n "$TESTBUS_TEST_HANDLE" ]; then
		testbus_call delete $TESTBUS_TEST_HANDLE
		unset TESTBUS_TEST_HANDLE
	fi
	if [ -n "$TESTCASE_NAME" ]; then
		echo "$TESTCASE_NAME: $status"
	fi >&2
	unset TESTCASE_NAME

	if [ "$status" != "SUCCESS" ]; then
		TESTBUS_GROUP_STATUS=FAILED
	fi
}

function testbus_fail_test {

	testbus_finish_test FAILED
}

function testbus_claim_host {

	testbus_trace "claim host $*"

	if [ -n "$TESTBUS_TEST_HANDLE" ]; then
		context=$TESTBUS_TEST_HANDLE
	elif [ -n "$TESTBUS_GROUP_HANDLE" ]; then
		context=$TESTBUS_GROUP_HANDLE
	else
		echo "No context to claim host for" >&2
		exit 1
	fi

	if test -n "$TESTBUS_CLAIM_TIMEOUT"; then
		testbus_call claim-host --timeout $TESTBUS_CLAIM_TIMEOUT "$@" $context
	else
		testbus_call claim-host "$@" $context
	fi
}

function testbus_setenv {

	testbus_trace "setenv $*"

	if [ -n "$TESTBUS_TEST_HANDLE" ]; then
		testbus_call setenv $TESTBUS_TEST_HANDLE "$@"
	elif [ -n "$TESTBUS_GROUP_HANDLE" ]; then
		testbus_call setenv $TESTBUS_GROUP_HANDLE "$@"
	else
		echo "No context to setenv for" >&2
		exit 1
	fi
}

function __testbus_upload_file {

	testbus_trace "upload file $*"
	testbus_call upload-file "$@"
}

function testbus_upload_file {

	testbus_trace "upload file $*"

	host=$1; shift
	testbus_call upload-file --host $host "$@"
}

function testbus_run_command {

	testbus_trace "run command $*"
	testbus_call run-command --context $TESTBUS_TEST_HANDLE "$@"
}

function __testbus_exit {

	if [ "$TESTBUS_GLOBAL_STATUS" = "SUCCESS" ]; then
		echo "All tests completed successfully"
		return 0
	else
		echo "Not all tests succeeded"
		return 1
	fi
}

function testbus_exit {

	trap "" 0 1 2

	testbus_finish_group SUCCESS
	__testbus_exit >&2
	exit $?
}

function testbus_exit_fail {

	testbus_finish_group FAILED
	__testbus_exit >&2
}

function testbus_new_script {

	name=${1:-script}; shift

	if [ -n "$TESTBUS_TEMPDIR" ]; then
		dir=$TESTBUS_TEMPDIR
	elif [ -n "$TESTBUS_GROUP_TEMPDIR" ]; then
		dir=$TESTBUS_GROUP_TEMPDIR
	else
		echo "testbus_new_script called without a tempdir" >&2
	fi

	script="$dir/$name"
	touch $script
	chmod 755 $script

	echo "$script"
}

function testbus_start_kvm {

	tag=$1; shift
	if [ -z "$tag" ]; then
		echo "testbus_start_kvm: no tag argument provided" >&2
		testbus_exit_fail
	fi

	image=$1; shift
	if [ -z "$image" ]; then
		echo "testbus_start_kvm: no image argument provided" >&2
		testbus_exit_fail
	fi

	mkdir -p /var/run/testbus/guestfs

	socket=/var/run/testbus-$tag.sock

	dbus-proxy \
		--identity "testbus-$tag" \
		--downstream unix-mux:$socket

	qemu-kvm \
		-name $tag \
		-pidfile /var/run/testbus/kvm-$tag.pid \
		-display vnc=:2 \
		-device virtio-serial \
		-device virtserialport,chardev=testbus-serial,name=org.opensuse.Testbus.0 \
		-chardev socket,id=testbus-serial,path=$socket \
		-virtfs local,path=/var/run/testbus/guestfs,security_model=passthrough,mount_tag=testbus \
		$image &
}



trap "testbus_exit_fail" 0 1 2
testbus_trace "Succesfully sourced testbus functions"
set -e
