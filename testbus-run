#!/bin/bash
#
# Script for bringing up all required guests/instances, and
# executing a testbus test script
#
# Simply invoke as
#	testbus-run <name-of-testsuite>
#

program_name=${0##*/}

TESTBUS_TS_DIR="/usr/share/testbus/suites"

function print_usage_and_die {

	cat >&2 <<EOF
$program_name: bad number of arguments
Usage:
  $program_name <testsuite> [<image-name>]

EOF
	exit 1
}

##################################################################
# Given an "instance" declaration from a config file, start the
# requested instance.
#
# The list of arguments consists of the "tag" name of the instance,
# optionally followed by a list of arguments that should be passed
# to "testbus-control start".
##################################################################
function start_instance_from_config {

	local instance_name

	instance_name=$1; shift

	if [ -z "$instance_name" ]; then
		echo "Missing instance name in config file" >&2
		exit 1
	fi

	# FIXME: use "testbus-control status" to detect whether the
	# instance is already active.

	testbus-control "$@" start $instance_name $testbus_base_image
}

##################################################################
# Start all instances described in the configuration file
##################################################################
function start_from_config {

	config_file=$1

	echo "Creating instances from $config_file"

	function instance { start_instance_from_config "$@"; }
	. $config_file
}

##################################################################
# Given an "instance" declaration from a config file, stop the
# indicated instance.
#
# The list of arguments consists of the "tag" name of the instance,
# optionally followed by a list of arguments that are ignored by
# this function.
##################################################################
function stop_instance_from_config {

	local instance_name

	instance_name=$1; shift

	if [ -z "$instance_name" ]; then
		echo "Missing instance name in config file" >&2
		exit 1
	fi

	testbus-control stop $instance_name
}

##################################################################
# Start all instances described in the configuration file
##################################################################
function stop_from_config {

	config_file=$1

	function instance { stop_instance_from_config "$@"; }
	. $config_file
}

# TBD: parse options

if [ $# -ne 1 -a $# -ne 2 ]; then
	echo "$program_name: bad number of arguments" >&2
	print_usage_and_die
fi

test_suite=$1
testbus_base_image=$2
shift 2

method=${TESTBUS_DEPLOYMENT_METHOD:-kvm}

if [ -z "$testbus_base_image" ]; then
	for f in /var/lib/testbus/image/$method/*; do
		if [ -e "$f/current" ]; then
			if [ -n "$testbus_base_image" ]; then
				echo "Found more than OS base image for method $method" >&2
				echo "Please specify the image name explicitly on the command line" >&2
				exit 1
			fi
			testbus_base_image=${f##*/}
		fi
	done

	if [ -z "$testbus_base_image" ]; then
		echo "No OS base image found for method $method" >&2
		echo "Please import an image using 'testbus-image import'" >&2
	fi

	echo "Using base image $method/$testbus_base_image"
fi

case $method in
kvm)
	: ;;

*)
	echo "Deployment method $method currently not supported" >&2
	exit 1;;
esac

if [ -f /usr/share/testbus/suites/$test_suite.conf ]; then
	if [ ! -x /usr/share/testbus/suites/$test_suite ]; then
		echo "Found a config file for test suite $test_suite, but no script to run" >&2
		exit 1
	fi

	config_file=/usr/share/testbus/suites/$test_suite.conf 
	test_script=/usr/share/testbus/suites/$test_suite

	start_from_config $config_file

	$test_script
	rv=$?

	stop_from_config $config_file
	exit $rv
fi

# Old style approach
if [ -x /usr/share/testbus/suites/$test_suite.run ]; then
	exec /usr/share/testbus/suites/$test_suite.run $testbus_base_image
fi

echo "Do not know how to run $test_suite: no $test_suite.run or $test_suite.conf file in $TESTBUS_TS_DIR" >&2
exit 1
