#!/bin/bash
#
# Start a KVM instance with DBus forwarding; optionally installing
# some additional RPMs inside.
#
# For instance, you invoke it as
#
# start-kvm \
#	--add-rpm testbus-agent-kvm-0.1-0.x86_64.rpm \
#	client sle11-image.qcow2
#
# Note that start-kvm always copies the provided image, so changes are
# never retained across restarts.
#

INSTANCE_BASE_DIR=/var/run/testbus

echo $*
set -- `getopt -u -l add-rpm:,mac-addr -o R:M: -- "$@"`
echo $*

while [ $# -gt 0 ]; do
	option=$1; shift
	case $option in
	--add-rpm|-R)
		rpm_list="$rpm_list $1"
		shift
		;;
	--mac-addr|-M)
		mac_address=$1
		shift
		;;
	--)
		break
		;;
	*)
		echo "Unsupported option $option" >&2
		exit 1
		;;
	esac
done

if [ $# -ne 2 ]; then
	echo "Bad number of non-option arguments. Expected <tag> <image-path>" >&2
	exit 1
fi

instance_tag=$1
base_image_path=$2

function fatal {

	echo "Fatal error: $@" >&2
	exit 1
}

function instance_dir_init {

	tag=$1

	test -n "$tag" || fatal "cannot build instance_dir_path: empty tag name"
	dir="$INSTANCE_BASE_DIR/$tag.d"

	rm -rf $dir
	mkdir -p $dir
	mkdir -p $dir/guestfs

	# cannot use instance_onboot here; instance_dir is not set yet
	cat >$dir/guestfs/onboot.sh <<"EOF"
#!/bin/bash
dirname=${0%/*}
if test -f $dirname/ifcfg-eth0; then
	cp $dirname/ifcfg-eth0 /etc/sysconfig/network
fi
EOF
	chmod 555 $dir/guestfs/onboot.sh

	echo $dir
}

##################################################################
# This is just a convenience function for use with here scripts.
# Use as
#  instance_onboot<<-EOF
# ... stuff that should get added to the onboot script
# EOF
##################################################################
function instance_onboot {

	cat >>$instance_dir/guestfs/onboot.sh
}

function instance_onboot_finish {

	test -d "$instance_dir" || fatal "$0: instance dir not set"
	if ls $instance_dir/guestfs | grep -qs '\.rpm$'; then
		instance_onboot <<"EOF"

echo "Installing/updating packages"
rpm -Uvh $dirname/*.rpm
EOF
	fi
}

function instance_dir_add_rpms {

	test -d "$instance_dir" || fatal "$0: instance dir not set"
	for src; do
		if [ -d "$src" ]; then
			cp -v "$src"/*.rpm $instance_dir/guestfs
		else
			cp -v "$src" $instance_dir/guestfs
		fi
	done
}

function instance_dir_add_image {

	img=$1; shift

	test -d "$instance_dir" || fatal "$0: instance dir not set"
	cp --reflink=auto -v $img $instance_dir/image
}

function instance_proxy_start {

	test -n "$instance_tag" || fatal "$0: instance tag not set"
	test -d "$instance_dir" || fatal "$0: instance dir not set"

	socket="$instance_dir/proxy.socket"

	dbus-proxy \
		--identity "testbus-$instance_tag" \
		--downstream unix-mux:$socket
	
	echo $socket
}

function instance_proxy_stop {

	test -n "$instance_tag" || fatal "$0: instance tag not set"
	dbus-proxy --kill="testbus-$instance_tag"
}

function instance_pick_index {

	index_list=`
	for dir in $INSTANCE_BASE_DIR/*.d; do
		if [ -f $dir/index ]; then
			cat $dir/index
		fi
	done |  sort -n`

	free_index=2
	for next_used in $index_list; do
		if [ $next_used -lt $free_index ]; then
			continue;
		fi
		if [ $next_used -gt $free_index ]; then
			break
		fi
		let free_index=$free_index+1
	done

	echo "$free_index" > $instance_dir/index
	echo "$free_index"
}

function instance_config_hostname {

	hostname=$1; shift
	ipaddr=$1; shift

	alias_list=
	for tag; do
		alias_list="$alias_list $tag.testbus"
	done

	instance_onboot <<EOF
echo $hostname >/etc/HOSTNAME
hostname ${hostname%%.*}

echo "$ipaddr $hostname $alias_list" >> /etc/hosts
EOF
}

function instance_config_network {

	ifname=$1; shift
	ipaddr=$1

	cat >$instance_dir/guestfs/ifcfg-$ifname <<-EOF
BOOTPROTO=static
STARTMODE=auto
IPADDR=$ipaddr
EOF
}

set -e
instance_dir=`instance_dir_init $instance_tag`
instance_dir_add_rpms $rpm_list
instance_dir_add_image $base_image_path

instance_socket=`instance_proxy_start`
instance_index=`instance_pick_index`

instance_ipaddr="10.0.0.$instance_index"
instance_ipmask="8"
instance_config_network eth0 "$instance_ipaddr/$instance_ipmask"

instance_hostname="instance$instance_index.testnet"
instance_config_hostname $instance_hostname $instance_ipaddr $instance_tag

if [ -n "$mac_addr" ]; then
	instance_macaddr=$mac_addr
else
	instance_macaddr=`printf 52:54:00:12:34:%02x $instance_index`
fi

instance_onboot_finish

# Bring up kvmbr0 - add an ACL entry to bridge.conf if it does not exist.
if ! grep -qs kvmbr0 /etc/qemu-kvm/bridge.conf; then
	echo allow kvmbr0 >> /etc/qemu-kvm/bridge.conf
fi

if ! ip link show kvmbr0; then
	brctl addbr kvmbr0
fi

ifconfig kvmbr0 up


echo "------------------"
echo "Starting KVM instance $instance_tag"
echo "Base image:      $base_image_path"
echo "RPMs to install: ${rpm_list:-none}"
echo "MAC Address:     $instance_macaddr"
echo "IP Address:      $instance_ipaddr/$instance_ipmask"
echo "Hostname:        $instance_hostname"
echo "------------------"

qemu-kvm \
	-name $instance_tag \
	-pidfile $instance_dir/kvm.pid \
	-display vnc=:$instance_index \
	-device virtio-serial \
	-device virtserialport,chardev=testbus-serial,name=org.opensuse.Testbus.0 \
	-chardev socket,id=testbus-serial,path=$instance_socket \
	-virtfs local,path=$instance_dir/guestfs,security_model=passthrough,mount_tag=testbus \
	-net bridge,br=kvmbr0 -net nic,macaddr=$instance_macaddr,model=virtio \
	$instance_dir/image

instance_proxy_stop
